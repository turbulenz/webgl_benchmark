# Copyright (c) 2013 Turbulenz Limited

from sys import argv
from argparse import ArgumentParser
from os import getcwd

from logging import basicConfig, CRITICAL, INFO, WARNING, error

from runner.browserrunner import BrowserRunner, list_browsers

__version__ = '0.0.1'

BROWSERRUNNER_DEVSERVER = "127.0.0.1:8070"
BROWSERRUNNER_TESTURLPATH = "/play/webgl-benchmark"
BROWSERRUNNER_TESTMODE = '/benchmark.canvas.debug.html'
#BROWSERRUNNER_TESTURL = "http://" + BROWSERRUNNER_DEVSERVER + BROWSERRUNNER_TESTURLPATH + BROWSERRUNNER_TESTMODE
BROWSERRUNNER_TESTURL = "file://" + getcwd() + BROWSERRUNNER_TESTMODE

CONFIG_PATH = "scripts/config.js"

CONFIG_TEMPLATE = ( "/* Generated by benchmarkrunner.py */\n"
                    "%s\n"
                    "//\n"
                    "// Name: %s\n"
                    "//\n"
                    "// Config - %s\n"
                    "//\n"
                    "\n"
                    "function Config() {}\n"
                    "Config.prototype = {};\n"
                    "\n"
                    "Config.create = function configCreateFn()\n"
                    "{\n"
                    "    var config = %s.create();\n"
                    "    %s\n"
                    "    %s\n"
                    "    return config;\n"
                    "};" )

def generate_globals(globals_list=None):
    if globals_list is None:
        return ""

    globals_string = ""
    for g in globals_list:
        globals_string += "/*globals %s: false*/\n" % g

    return globals_string

def generate_config(config_name="default", config_target=None, allow_querystring=False):

    config_inherit = "BaseConfig"
    if config_target == "online":
        config_inherit = "OnlineConfig"

    if config_target == "offline":
        config_inherit = "OfflineConfig"

    globals_list = [config_inherit]

    if allow_querystring:
        globals_list.append("updateDictFromQueryString")
        config_querystring = "updateDictFromQueryString(config);"
    else:
        config_querystring = ""

    config_globals = generate_globals(globals_list)

    if config_target == "online":
        config_desc = "The online configuration, targeting online data"
    elif config_target == "offline":
        config_desc = "The offline configuration, to run without an internet connection or local server"
    elif config_target == "local":
        config_desc = "The local configuration, to run with either online or offline data via the local server"
    else: #default
        config_desc = "The standard configuration, no changes to the base"

    config_override = "config.defaultCapture = \"" + config_name + "\";"

    #TODO: Output to file
    config_output = CONFIG_TEMPLATE % (config_globals, config_name, config_desc, config_inherit, config_override, config_querystring)

    try:
        f = open(CONFIG_PATH, 'w')
        f.write(config_output)
        f.close()
        return True
    except IOError as e:
        msg = "Failed to write config file: %s" % CONFIG_PATH
        return False


def main():
    parser = ArgumentParser(description="Run the benchmark with given settings.")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser.add_argument("-s", "--silent", action="store_true", help="silent running")
    parser.add_argument("--version", action='version', version=__version__)

    parser.add_argument("--config", action='store', default='shadows_norendertarget',
        help="the configuration to run (by name)")
    parser.add_argument("--target", action='store', default='offline',
        help="the target to run [offline, online, local]")
    parser.add_argument("--browser", action='store', default='chrome',
        help="browser to run, must be one of [" + ','.join(list_browsers()) + "] (defaults to chrome)")

    args = parser.parse_args(argv[1:])

    if args.silent:
        basicConfig(level=CRITICAL)
    elif args.verbose:
        basicConfig(level=INFO)
    else:
        basicConfig(level=WARNING)

    if not generate_config(config_name=args.config, config_target=args.target, allow_querystring=True):
        error("Generating config failed. Aborting")
        return 1

    browser_runner = BrowserRunner(None, args.browser)
    browser_runner.run(BROWSERRUNNER_TESTURL, timeout=300) # 5 minute timeout

    return 0

if __name__ == '__main__':
    main()
